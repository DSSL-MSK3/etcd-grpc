// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: auth.proto

#ifndef PROTOBUF_INCLUDED_auth_2eproto
#define PROTOBUF_INCLUDED_auth_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_auth_2eproto 

namespace protobuf_auth_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_auth_2eproto
namespace authpb {
class AclEntry;
class AclEntryDefaultTypeInternal;
extern AclEntryDefaultTypeInternal _AclEntry_default_instance_;
class AclHelper;
class AclHelperDefaultTypeInternal;
extern AclHelperDefaultTypeInternal _AclHelper_default_instance_;
class Permission;
class PermissionDefaultTypeInternal;
extern PermissionDefaultTypeInternal _Permission_default_instance_;
class Prototype;
class PrototypeDefaultTypeInternal;
extern PrototypeDefaultTypeInternal _Prototype_default_instance_;
class PrototypeField;
class PrototypeFieldDefaultTypeInternal;
extern PrototypeFieldDefaultTypeInternal _PrototypeField_default_instance_;
class Role;
class RoleDefaultTypeInternal;
extern RoleDefaultTypeInternal _Role_default_instance_;
class User;
class UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
}  // namespace authpb
namespace google {
namespace protobuf {
template<> ::authpb::AclEntry* Arena::CreateMaybeMessage<::authpb::AclEntry>(Arena*);
template<> ::authpb::AclHelper* Arena::CreateMaybeMessage<::authpb::AclHelper>(Arena*);
template<> ::authpb::Permission* Arena::CreateMaybeMessage<::authpb::Permission>(Arena*);
template<> ::authpb::Prototype* Arena::CreateMaybeMessage<::authpb::Prototype>(Arena*);
template<> ::authpb::PrototypeField* Arena::CreateMaybeMessage<::authpb::PrototypeField>(Arena*);
template<> ::authpb::Role* Arena::CreateMaybeMessage<::authpb::Role>(Arena*);
template<> ::authpb::User* Arena::CreateMaybeMessage<::authpb::User>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace authpb {

enum Permission_Type {
  Permission_Type_READ = 0,
  Permission_Type_WRITE = 1,
  Permission_Type_READWRITE = 2,
  Permission_Type_Permission_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Permission_Type_Permission_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Permission_Type_IsValid(int value);
const Permission_Type Permission_Type_Type_MIN = Permission_Type_READ;
const Permission_Type Permission_Type_Type_MAX = Permission_Type_READWRITE;
const int Permission_Type_Type_ARRAYSIZE = Permission_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Permission_Type_descriptor();
inline const ::std::string& Permission_Type_Name(Permission_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Permission_Type_descriptor(), value);
}
inline bool Permission_Type_Parse(
    const ::std::string& name, Permission_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Permission_Type>(
    Permission_Type_descriptor(), name, value);
}
enum Prototype_Flags {
  Prototype_Flags_NONE = 0,
  Prototype_Flags_FORCE_SUBOBJECTS_FIND = 1,
  Prototype_Flags_Prototype_Flags_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Prototype_Flags_Prototype_Flags_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Prototype_Flags_IsValid(int value);
const Prototype_Flags Prototype_Flags_Flags_MIN = Prototype_Flags_NONE;
const Prototype_Flags Prototype_Flags_Flags_MAX = Prototype_Flags_FORCE_SUBOBJECTS_FIND;
const int Prototype_Flags_Flags_ARRAYSIZE = Prototype_Flags_Flags_MAX + 1;

const ::google::protobuf::EnumDescriptor* Prototype_Flags_descriptor();
inline const ::std::string& Prototype_Flags_Name(Prototype_Flags value) {
  return ::google::protobuf::internal::NameOfEnum(
    Prototype_Flags_descriptor(), value);
}
inline bool Prototype_Flags_Parse(
    const ::std::string& name, Prototype_Flags* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Prototype_Flags>(
    Prototype_Flags_descriptor(), name, value);
}
enum BuiltinRights {
  BUILTIN_RIGHTS_NONE = 0,
  BUILTIN_RIGHTS_VIEW = 1,
  BuiltinRights_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BuiltinRights_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BuiltinRights_IsValid(int value);
const BuiltinRights BuiltinRights_MIN = BUILTIN_RIGHTS_NONE;
const BuiltinRights BuiltinRights_MAX = BUILTIN_RIGHTS_VIEW;
const int BuiltinRights_ARRAYSIZE = BuiltinRights_MAX + 1;

const ::google::protobuf::EnumDescriptor* BuiltinRights_descriptor();
inline const ::std::string& BuiltinRights_Name(BuiltinRights value) {
  return ::google::protobuf::internal::NameOfEnum(
    BuiltinRights_descriptor(), value);
}
inline bool BuiltinRights_Parse(
    const ::std::string& name, BuiltinRights* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BuiltinRights>(
    BuiltinRights_descriptor(), name, value);
}
// ===================================================================

class User : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:authpb.User) */ {
 public:
  User();
  virtual ~User();

  User(const User& from);

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(User&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const User& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(User* other);
  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline User* New() const final {
    return CreateMaybeMessage<User>(NULL);
  }

  User* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<User>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string roles = 3;
  int roles_size() const;
  void clear_roles();
  static const int kRolesFieldNumber = 3;
  const ::std::string& roles(int index) const;
  ::std::string* mutable_roles(int index);
  void set_roles(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_roles(int index, ::std::string&& value);
  #endif
  void set_roles(int index, const char* value);
  void set_roles(int index, const char* value, size_t size);
  ::std::string* add_roles();
  void add_roles(const ::std::string& value);
  #if LANG_CXX11
  void add_roles(::std::string&& value);
  #endif
  void add_roles(const char* value);
  void add_roles(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& roles() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_roles();

  // repeated .authpb.AclEntry acl = 5;
  int acl_size() const;
  void clear_acl();
  static const int kAclFieldNumber = 5;
  ::authpb::AclEntry* mutable_acl(int index);
  ::google::protobuf::RepeatedPtrField< ::authpb::AclEntry >*
      mutable_acl();
  const ::authpb::AclEntry& acl(int index) const;
  ::authpb::AclEntry* add_acl();
  const ::google::protobuf::RepeatedPtrField< ::authpb::AclEntry >&
      acl() const;

  // bytes name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const void* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // uint64 modRevision = 4;
  void clear_modrevision();
  static const int kModRevisionFieldNumber = 4;
  ::google::protobuf::uint64 modrevision() const;
  void set_modrevision(::google::protobuf::uint64 value);

  // int64 aclRevision = 6;
  void clear_aclrevision();
  static const int kAclRevisionFieldNumber = 6;
  ::google::protobuf::int64 aclrevision() const;
  void set_aclrevision(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:authpb.User)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> roles_;
  ::google::protobuf::RepeatedPtrField< ::authpb::AclEntry > acl_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::uint64 modrevision_;
  ::google::protobuf::int64 aclrevision_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_auth_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Permission : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:authpb.Permission) */ {
 public:
  Permission();
  virtual ~Permission();

  Permission(const Permission& from);

  inline Permission& operator=(const Permission& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Permission(Permission&& from) noexcept
    : Permission() {
    *this = ::std::move(from);
  }

  inline Permission& operator=(Permission&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Permission& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Permission* internal_default_instance() {
    return reinterpret_cast<const Permission*>(
               &_Permission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Permission* other);
  friend void swap(Permission& a, Permission& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Permission* New() const final {
    return CreateMaybeMessage<Permission>(NULL);
  }

  Permission* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Permission>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Permission& from);
  void MergeFrom(const Permission& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Permission* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Permission_Type Type;
  static const Type READ =
    Permission_Type_READ;
  static const Type WRITE =
    Permission_Type_WRITE;
  static const Type READWRITE =
    Permission_Type_READWRITE;
  static inline bool Type_IsValid(int value) {
    return Permission_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Permission_Type_Type_MIN;
  static const Type Type_MAX =
    Permission_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Permission_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Permission_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Permission_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Permission_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bytes key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // bytes range_end = 3;
  void clear_range_end();
  static const int kRangeEndFieldNumber = 3;
  const ::std::string& range_end() const;
  void set_range_end(const ::std::string& value);
  #if LANG_CXX11
  void set_range_end(::std::string&& value);
  #endif
  void set_range_end(const char* value);
  void set_range_end(const void* value, size_t size);
  ::std::string* mutable_range_end();
  ::std::string* release_range_end();
  void set_allocated_range_end(::std::string* range_end);

  // .authpb.Permission.Type permType = 1;
  void clear_permtype();
  static const int kPermTypeFieldNumber = 1;
  ::authpb::Permission_Type permtype() const;
  void set_permtype(::authpb::Permission_Type value);

  // @@protoc_insertion_point(class_scope:authpb.Permission)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr range_end_;
  int permtype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_auth_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Role : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:authpb.Role) */ {
 public:
  Role();
  virtual ~Role();

  Role(const Role& from);

  inline Role& operator=(const Role& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Role(Role&& from) noexcept
    : Role() {
    *this = ::std::move(from);
  }

  inline Role& operator=(Role&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Role& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Role* internal_default_instance() {
    return reinterpret_cast<const Role*>(
               &_Role_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Role* other);
  friend void swap(Role& a, Role& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Role* New() const final {
    return CreateMaybeMessage<Role>(NULL);
  }

  Role* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Role>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Role& from);
  void MergeFrom(const Role& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Role* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .authpb.Permission keyPermission = 2;
  int keypermission_size() const;
  void clear_keypermission();
  static const int kKeyPermissionFieldNumber = 2;
  ::authpb::Permission* mutable_keypermission(int index);
  ::google::protobuf::RepeatedPtrField< ::authpb::Permission >*
      mutable_keypermission();
  const ::authpb::Permission& keypermission(int index) const;
  ::authpb::Permission* add_keypermission();
  const ::google::protobuf::RepeatedPtrField< ::authpb::Permission >&
      keypermission() const;

  // bytes name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:authpb.Role)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::authpb::Permission > keypermission_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_auth_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PrototypeField : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:authpb.PrototypeField) */ {
 public:
  PrototypeField();
  virtual ~PrototypeField();

  PrototypeField(const PrototypeField& from);

  inline PrototypeField& operator=(const PrototypeField& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrototypeField(PrototypeField&& from) noexcept
    : PrototypeField() {
    *this = ::std::move(from);
  }

  inline PrototypeField& operator=(PrototypeField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PrototypeField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrototypeField* internal_default_instance() {
    return reinterpret_cast<const PrototypeField*>(
               &_PrototypeField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PrototypeField* other);
  friend void swap(PrototypeField& a, PrototypeField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrototypeField* New() const final {
    return CreateMaybeMessage<PrototypeField>(NULL);
  }

  PrototypeField* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PrototypeField>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PrototypeField& from);
  void MergeFrom(const PrototypeField& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrototypeField* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // uint32 rightsRead = 2;
  void clear_rightsread();
  static const int kRightsReadFieldNumber = 2;
  ::google::protobuf::uint32 rightsread() const;
  void set_rightsread(::google::protobuf::uint32 value);

  // uint32 rightsWrite = 3;
  void clear_rightswrite();
  static const int kRightsWriteFieldNumber = 3;
  ::google::protobuf::uint32 rightswrite() const;
  void set_rightswrite(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:authpb.PrototypeField)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::uint32 rightsread_;
  ::google::protobuf::uint32 rightswrite_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_auth_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Prototype : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:authpb.Prototype) */ {
 public:
  Prototype();
  virtual ~Prototype();

  Prototype(const Prototype& from);

  inline Prototype& operator=(const Prototype& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Prototype(Prototype&& from) noexcept
    : Prototype() {
    *this = ::std::move(from);
  }

  inline Prototype& operator=(Prototype&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Prototype& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Prototype* internal_default_instance() {
    return reinterpret_cast<const Prototype*>(
               &_Prototype_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Prototype* other);
  friend void swap(Prototype& a, Prototype& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Prototype* New() const final {
    return CreateMaybeMessage<Prototype>(NULL);
  }

  Prototype* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Prototype>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Prototype& from);
  void MergeFrom(const Prototype& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Prototype* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Prototype_Flags Flags;
  static const Flags NONE =
    Prototype_Flags_NONE;
  static const Flags FORCE_SUBOBJECTS_FIND =
    Prototype_Flags_FORCE_SUBOBJECTS_FIND;
  static inline bool Flags_IsValid(int value) {
    return Prototype_Flags_IsValid(value);
  }
  static const Flags Flags_MIN =
    Prototype_Flags_Flags_MIN;
  static const Flags Flags_MAX =
    Prototype_Flags_Flags_MAX;
  static const int Flags_ARRAYSIZE =
    Prototype_Flags_Flags_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Flags_descriptor() {
    return Prototype_Flags_descriptor();
  }
  static inline const ::std::string& Flags_Name(Flags value) {
    return Prototype_Flags_Name(value);
  }
  static inline bool Flags_Parse(const ::std::string& name,
      Flags* value) {
    return Prototype_Flags_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .authpb.PrototypeField fields = 2;
  int fields_size() const;
  void clear_fields();
  static const int kFieldsFieldNumber = 2;
  ::authpb::PrototypeField* mutable_fields(int index);
  ::google::protobuf::RepeatedPtrField< ::authpb::PrototypeField >*
      mutable_fields();
  const ::authpb::PrototypeField& fields(int index) const;
  ::authpb::PrototypeField* add_fields();
  const ::google::protobuf::RepeatedPtrField< ::authpb::PrototypeField >&
      fields() const;

  // bytes name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint32 flags = 3;
  void clear_flags();
  static const int kFlagsFieldNumber = 3;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:authpb.Prototype)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::authpb::PrototypeField > fields_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 flags_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_auth_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AclEntry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:authpb.AclEntry) */ {
 public:
  AclEntry();
  virtual ~AclEntry();

  AclEntry(const AclEntry& from);

  inline AclEntry& operator=(const AclEntry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AclEntry(AclEntry&& from) noexcept
    : AclEntry() {
    *this = ::std::move(from);
  }

  inline AclEntry& operator=(AclEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AclEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AclEntry* internal_default_instance() {
    return reinterpret_cast<const AclEntry*>(
               &_AclEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(AclEntry* other);
  friend void swap(AclEntry& a, AclEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AclEntry* New() const final {
    return CreateMaybeMessage<AclEntry>(NULL);
  }

  AclEntry* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AclEntry>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AclEntry& from);
  void MergeFrom(const AclEntry& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AclEntry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // uint32 rightsSet = 2;
  void clear_rightsset();
  static const int kRightsSetFieldNumber = 2;
  ::google::protobuf::uint32 rightsset() const;
  void set_rightsset(::google::protobuf::uint32 value);

  // uint32 rightsUnset = 3;
  void clear_rightsunset();
  static const int kRightsUnsetFieldNumber = 3;
  ::google::protobuf::uint32 rightsunset() const;
  void set_rightsunset(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:authpb.AclEntry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::uint32 rightsset_;
  ::google::protobuf::uint32 rightsunset_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_auth_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AclHelper : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:authpb.AclHelper) */ {
 public:
  AclHelper();
  virtual ~AclHelper();

  AclHelper(const AclHelper& from);

  inline AclHelper& operator=(const AclHelper& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AclHelper(AclHelper&& from) noexcept
    : AclHelper() {
    *this = ::std::move(from);
  }

  inline AclHelper& operator=(AclHelper&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AclHelper& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AclHelper* internal_default_instance() {
    return reinterpret_cast<const AclHelper*>(
               &_AclHelper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(AclHelper* other);
  friend void swap(AclHelper& a, AclHelper& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AclHelper* New() const final {
    return CreateMaybeMessage<AclHelper>(NULL);
  }

  AclHelper* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AclHelper>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AclHelper& from);
  void MergeFrom(const AclHelper& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AclHelper* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .authpb.AclEntry acl = 1;
  int acl_size() const;
  void clear_acl();
  static const int kAclFieldNumber = 1;
  ::authpb::AclEntry* mutable_acl(int index);
  ::google::protobuf::RepeatedPtrField< ::authpb::AclEntry >*
      mutable_acl();
  const ::authpb::AclEntry& acl(int index) const;
  ::authpb::AclEntry* add_acl();
  const ::google::protobuf::RepeatedPtrField< ::authpb::AclEntry >&
      acl() const;

  // @@protoc_insertion_point(class_scope:authpb.AclHelper)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::authpb::AclEntry > acl_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_auth_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// User

// bytes name = 1;
inline void User::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::name() const {
  // @@protoc_insertion_point(field_get:authpb.User.name)
  return name_.GetNoArena();
}
inline void User::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:authpb.User.name)
}
#if LANG_CXX11
inline void User::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:authpb.User.name)
}
#endif
inline void User::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:authpb.User.name)
}
inline void User::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:authpb.User.name)
}
inline ::std::string* User::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:authpb.User.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_name() {
  // @@protoc_insertion_point(field_release:authpb.User.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:authpb.User.name)
}

// bytes password = 2;
inline void User::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::password() const {
  // @@protoc_insertion_point(field_get:authpb.User.password)
  return password_.GetNoArena();
}
inline void User::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:authpb.User.password)
}
#if LANG_CXX11
inline void User::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:authpb.User.password)
}
#endif
inline void User::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:authpb.User.password)
}
inline void User::set_password(const void* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:authpb.User.password)
}
inline ::std::string* User::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:authpb.User.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_password() {
  // @@protoc_insertion_point(field_release:authpb.User.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:authpb.User.password)
}

// repeated string roles = 3;
inline int User::roles_size() const {
  return roles_.size();
}
inline void User::clear_roles() {
  roles_.Clear();
}
inline const ::std::string& User::roles(int index) const {
  // @@protoc_insertion_point(field_get:authpb.User.roles)
  return roles_.Get(index);
}
inline ::std::string* User::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:authpb.User.roles)
  return roles_.Mutable(index);
}
inline void User::set_roles(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:authpb.User.roles)
  roles_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void User::set_roles(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:authpb.User.roles)
  roles_.Mutable(index)->assign(std::move(value));
}
#endif
inline void User::set_roles(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  roles_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:authpb.User.roles)
}
inline void User::set_roles(int index, const char* value, size_t size) {
  roles_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:authpb.User.roles)
}
inline ::std::string* User::add_roles() {
  // @@protoc_insertion_point(field_add_mutable:authpb.User.roles)
  return roles_.Add();
}
inline void User::add_roles(const ::std::string& value) {
  roles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:authpb.User.roles)
}
#if LANG_CXX11
inline void User::add_roles(::std::string&& value) {
  roles_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:authpb.User.roles)
}
#endif
inline void User::add_roles(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  roles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:authpb.User.roles)
}
inline void User::add_roles(const char* value, size_t size) {
  roles_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:authpb.User.roles)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
User::roles() const {
  // @@protoc_insertion_point(field_list:authpb.User.roles)
  return roles_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
User::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:authpb.User.roles)
  return &roles_;
}

// uint64 modRevision = 4;
inline void User::clear_modrevision() {
  modrevision_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 User::modrevision() const {
  // @@protoc_insertion_point(field_get:authpb.User.modRevision)
  return modrevision_;
}
inline void User::set_modrevision(::google::protobuf::uint64 value) {
  
  modrevision_ = value;
  // @@protoc_insertion_point(field_set:authpb.User.modRevision)
}

// repeated .authpb.AclEntry acl = 5;
inline int User::acl_size() const {
  return acl_.size();
}
inline void User::clear_acl() {
  acl_.Clear();
}
inline ::authpb::AclEntry* User::mutable_acl(int index) {
  // @@protoc_insertion_point(field_mutable:authpb.User.acl)
  return acl_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::authpb::AclEntry >*
User::mutable_acl() {
  // @@protoc_insertion_point(field_mutable_list:authpb.User.acl)
  return &acl_;
}
inline const ::authpb::AclEntry& User::acl(int index) const {
  // @@protoc_insertion_point(field_get:authpb.User.acl)
  return acl_.Get(index);
}
inline ::authpb::AclEntry* User::add_acl() {
  // @@protoc_insertion_point(field_add:authpb.User.acl)
  return acl_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::authpb::AclEntry >&
User::acl() const {
  // @@protoc_insertion_point(field_list:authpb.User.acl)
  return acl_;
}

// int64 aclRevision = 6;
inline void User::clear_aclrevision() {
  aclrevision_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 User::aclrevision() const {
  // @@protoc_insertion_point(field_get:authpb.User.aclRevision)
  return aclrevision_;
}
inline void User::set_aclrevision(::google::protobuf::int64 value) {
  
  aclrevision_ = value;
  // @@protoc_insertion_point(field_set:authpb.User.aclRevision)
}

// -------------------------------------------------------------------

// Permission

// .authpb.Permission.Type permType = 1;
inline void Permission::clear_permtype() {
  permtype_ = 0;
}
inline ::authpb::Permission_Type Permission::permtype() const {
  // @@protoc_insertion_point(field_get:authpb.Permission.permType)
  return static_cast< ::authpb::Permission_Type >(permtype_);
}
inline void Permission::set_permtype(::authpb::Permission_Type value) {
  
  permtype_ = value;
  // @@protoc_insertion_point(field_set:authpb.Permission.permType)
}

// bytes key = 2;
inline void Permission::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Permission::key() const {
  // @@protoc_insertion_point(field_get:authpb.Permission.key)
  return key_.GetNoArena();
}
inline void Permission::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:authpb.Permission.key)
}
#if LANG_CXX11
inline void Permission::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:authpb.Permission.key)
}
#endif
inline void Permission::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:authpb.Permission.key)
}
inline void Permission::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:authpb.Permission.key)
}
inline ::std::string* Permission::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:authpb.Permission.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Permission::release_key() {
  // @@protoc_insertion_point(field_release:authpb.Permission.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Permission::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:authpb.Permission.key)
}

// bytes range_end = 3;
inline void Permission::clear_range_end() {
  range_end_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Permission::range_end() const {
  // @@protoc_insertion_point(field_get:authpb.Permission.range_end)
  return range_end_.GetNoArena();
}
inline void Permission::set_range_end(const ::std::string& value) {
  
  range_end_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:authpb.Permission.range_end)
}
#if LANG_CXX11
inline void Permission::set_range_end(::std::string&& value) {
  
  range_end_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:authpb.Permission.range_end)
}
#endif
inline void Permission::set_range_end(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  range_end_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:authpb.Permission.range_end)
}
inline void Permission::set_range_end(const void* value, size_t size) {
  
  range_end_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:authpb.Permission.range_end)
}
inline ::std::string* Permission::mutable_range_end() {
  
  // @@protoc_insertion_point(field_mutable:authpb.Permission.range_end)
  return range_end_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Permission::release_range_end() {
  // @@protoc_insertion_point(field_release:authpb.Permission.range_end)
  
  return range_end_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Permission::set_allocated_range_end(::std::string* range_end) {
  if (range_end != NULL) {
    
  } else {
    
  }
  range_end_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), range_end);
  // @@protoc_insertion_point(field_set_allocated:authpb.Permission.range_end)
}

// -------------------------------------------------------------------

// Role

// bytes name = 1;
inline void Role::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Role::name() const {
  // @@protoc_insertion_point(field_get:authpb.Role.name)
  return name_.GetNoArena();
}
inline void Role::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:authpb.Role.name)
}
#if LANG_CXX11
inline void Role::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:authpb.Role.name)
}
#endif
inline void Role::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:authpb.Role.name)
}
inline void Role::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:authpb.Role.name)
}
inline ::std::string* Role::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:authpb.Role.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Role::release_name() {
  // @@protoc_insertion_point(field_release:authpb.Role.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Role::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:authpb.Role.name)
}

// repeated .authpb.Permission keyPermission = 2;
inline int Role::keypermission_size() const {
  return keypermission_.size();
}
inline void Role::clear_keypermission() {
  keypermission_.Clear();
}
inline ::authpb::Permission* Role::mutable_keypermission(int index) {
  // @@protoc_insertion_point(field_mutable:authpb.Role.keyPermission)
  return keypermission_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::authpb::Permission >*
Role::mutable_keypermission() {
  // @@protoc_insertion_point(field_mutable_list:authpb.Role.keyPermission)
  return &keypermission_;
}
inline const ::authpb::Permission& Role::keypermission(int index) const {
  // @@protoc_insertion_point(field_get:authpb.Role.keyPermission)
  return keypermission_.Get(index);
}
inline ::authpb::Permission* Role::add_keypermission() {
  // @@protoc_insertion_point(field_add:authpb.Role.keyPermission)
  return keypermission_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::authpb::Permission >&
Role::keypermission() const {
  // @@protoc_insertion_point(field_list:authpb.Role.keyPermission)
  return keypermission_;
}

// -------------------------------------------------------------------

// PrototypeField

// string key = 1;
inline void PrototypeField::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrototypeField::key() const {
  // @@protoc_insertion_point(field_get:authpb.PrototypeField.key)
  return key_.GetNoArena();
}
inline void PrototypeField::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:authpb.PrototypeField.key)
}
#if LANG_CXX11
inline void PrototypeField::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:authpb.PrototypeField.key)
}
#endif
inline void PrototypeField::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:authpb.PrototypeField.key)
}
inline void PrototypeField::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:authpb.PrototypeField.key)
}
inline ::std::string* PrototypeField::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:authpb.PrototypeField.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrototypeField::release_key() {
  // @@protoc_insertion_point(field_release:authpb.PrototypeField.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrototypeField::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:authpb.PrototypeField.key)
}

// uint32 rightsRead = 2;
inline void PrototypeField::clear_rightsread() {
  rightsread_ = 0u;
}
inline ::google::protobuf::uint32 PrototypeField::rightsread() const {
  // @@protoc_insertion_point(field_get:authpb.PrototypeField.rightsRead)
  return rightsread_;
}
inline void PrototypeField::set_rightsread(::google::protobuf::uint32 value) {
  
  rightsread_ = value;
  // @@protoc_insertion_point(field_set:authpb.PrototypeField.rightsRead)
}

// uint32 rightsWrite = 3;
inline void PrototypeField::clear_rightswrite() {
  rightswrite_ = 0u;
}
inline ::google::protobuf::uint32 PrototypeField::rightswrite() const {
  // @@protoc_insertion_point(field_get:authpb.PrototypeField.rightsWrite)
  return rightswrite_;
}
inline void PrototypeField::set_rightswrite(::google::protobuf::uint32 value) {
  
  rightswrite_ = value;
  // @@protoc_insertion_point(field_set:authpb.PrototypeField.rightsWrite)
}

// -------------------------------------------------------------------

// Prototype

// bytes name = 1;
inline void Prototype::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Prototype::name() const {
  // @@protoc_insertion_point(field_get:authpb.Prototype.name)
  return name_.GetNoArena();
}
inline void Prototype::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:authpb.Prototype.name)
}
#if LANG_CXX11
inline void Prototype::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:authpb.Prototype.name)
}
#endif
inline void Prototype::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:authpb.Prototype.name)
}
inline void Prototype::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:authpb.Prototype.name)
}
inline ::std::string* Prototype::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:authpb.Prototype.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Prototype::release_name() {
  // @@protoc_insertion_point(field_release:authpb.Prototype.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Prototype::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:authpb.Prototype.name)
}

// repeated .authpb.PrototypeField fields = 2;
inline int Prototype::fields_size() const {
  return fields_.size();
}
inline void Prototype::clear_fields() {
  fields_.Clear();
}
inline ::authpb::PrototypeField* Prototype::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:authpb.Prototype.fields)
  return fields_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::authpb::PrototypeField >*
Prototype::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:authpb.Prototype.fields)
  return &fields_;
}
inline const ::authpb::PrototypeField& Prototype::fields(int index) const {
  // @@protoc_insertion_point(field_get:authpb.Prototype.fields)
  return fields_.Get(index);
}
inline ::authpb::PrototypeField* Prototype::add_fields() {
  // @@protoc_insertion_point(field_add:authpb.Prototype.fields)
  return fields_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::authpb::PrototypeField >&
Prototype::fields() const {
  // @@protoc_insertion_point(field_list:authpb.Prototype.fields)
  return fields_;
}

// uint32 flags = 3;
inline void Prototype::clear_flags() {
  flags_ = 0u;
}
inline ::google::protobuf::uint32 Prototype::flags() const {
  // @@protoc_insertion_point(field_get:authpb.Prototype.flags)
  return flags_;
}
inline void Prototype::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:authpb.Prototype.flags)
}

// -------------------------------------------------------------------

// AclEntry

// string path = 1;
inline void AclEntry::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AclEntry::path() const {
  // @@protoc_insertion_point(field_get:authpb.AclEntry.path)
  return path_.GetNoArena();
}
inline void AclEntry::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:authpb.AclEntry.path)
}
#if LANG_CXX11
inline void AclEntry::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:authpb.AclEntry.path)
}
#endif
inline void AclEntry::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:authpb.AclEntry.path)
}
inline void AclEntry::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:authpb.AclEntry.path)
}
inline ::std::string* AclEntry::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:authpb.AclEntry.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AclEntry::release_path() {
  // @@protoc_insertion_point(field_release:authpb.AclEntry.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AclEntry::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:authpb.AclEntry.path)
}

// uint32 rightsSet = 2;
inline void AclEntry::clear_rightsset() {
  rightsset_ = 0u;
}
inline ::google::protobuf::uint32 AclEntry::rightsset() const {
  // @@protoc_insertion_point(field_get:authpb.AclEntry.rightsSet)
  return rightsset_;
}
inline void AclEntry::set_rightsset(::google::protobuf::uint32 value) {
  
  rightsset_ = value;
  // @@protoc_insertion_point(field_set:authpb.AclEntry.rightsSet)
}

// uint32 rightsUnset = 3;
inline void AclEntry::clear_rightsunset() {
  rightsunset_ = 0u;
}
inline ::google::protobuf::uint32 AclEntry::rightsunset() const {
  // @@protoc_insertion_point(field_get:authpb.AclEntry.rightsUnset)
  return rightsunset_;
}
inline void AclEntry::set_rightsunset(::google::protobuf::uint32 value) {
  
  rightsunset_ = value;
  // @@protoc_insertion_point(field_set:authpb.AclEntry.rightsUnset)
}

// -------------------------------------------------------------------

// AclHelper

// repeated .authpb.AclEntry acl = 1;
inline int AclHelper::acl_size() const {
  return acl_.size();
}
inline void AclHelper::clear_acl() {
  acl_.Clear();
}
inline ::authpb::AclEntry* AclHelper::mutable_acl(int index) {
  // @@protoc_insertion_point(field_mutable:authpb.AclHelper.acl)
  return acl_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::authpb::AclEntry >*
AclHelper::mutable_acl() {
  // @@protoc_insertion_point(field_mutable_list:authpb.AclHelper.acl)
  return &acl_;
}
inline const ::authpb::AclEntry& AclHelper::acl(int index) const {
  // @@protoc_insertion_point(field_get:authpb.AclHelper.acl)
  return acl_.Get(index);
}
inline ::authpb::AclEntry* AclHelper::add_acl() {
  // @@protoc_insertion_point(field_add:authpb.AclHelper.acl)
  return acl_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::authpb::AclEntry >&
AclHelper::acl() const {
  // @@protoc_insertion_point(field_list:authpb.AclHelper.acl)
  return acl_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace authpb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::authpb::Permission_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::authpb::Permission_Type>() {
  return ::authpb::Permission_Type_descriptor();
}
template <> struct is_proto_enum< ::authpb::Prototype_Flags> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::authpb::Prototype_Flags>() {
  return ::authpb::Prototype_Flags_descriptor();
}
template <> struct is_proto_enum< ::authpb::BuiltinRights> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::authpb::BuiltinRights>() {
  return ::authpb::BuiltinRights_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_auth_2eproto
